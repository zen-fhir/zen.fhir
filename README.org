* About
~zen.fhir~ is a [[github.com/zen-lang/zen][zen-lang]] namespace that is used in all [[github.com/orgs/zen-fhir/repositories][packages]] generated by [[github.com/zen-lang/fhir][zen-fhir]] tool.

~zen.fhir~ extends ~zen/schema~ to allow describing FHIR-specific info such as bindings, references, extensions, etc.

* Table of Contents                                                     :TOC:
- [[#about][About]]
- [[#how-to][How to]]
  - [[#describe-a-profile-on][describe a profile on]]
    - [[#existing-fhir-resource-type][existing FHIR resource type]]
    - [[#existing-fhir-profile][existing FHIR profile]]
    - [[#existing-fhir-data-type][existing FHIR data type]]
  - [[#describe-a-constraint][describe a constraint]]
    - [[#require-cardinality-1x][require (cardinality 1..x)]]
    - [[#forbid-cardinality-00][forbid (cardinality 0..0)]]
    - [[#min-and-max-elements-in-an-array][min and max elements in an array]]
    - [[#value-pattern][value pattern]]
    - [[#fixed-value][fixed value]]
    - [[#slicing-on-an-array][slicing on an array]]
    - [[#binding-to-a-value-set][binding to a value set]]
    - [[#invariant][invariant]]
  - [[#describe-a-constraint-to-a-nested-element][describe a constraint to a nested element]]
  - [[#describe-an-extension][describe an extension]]
    - [[#of-a-primitive-type][of a primitive type]]
    - [[#of-a-complex-type][of a complex type]]
    - [[#with-a-nested-extension][with a nested extension]]
    - [[#constraint][constraint]]
  - [[#add-an-extension-to-a-profile][add an extension to a profile]]
  - [[#describe-a-new-value-set][describe a new value set]]
  - [[#constraint-some-existing-value-set-or-code-system][constraint some existing value set or code system]]
  - [[#describe-arbitrary-resource][describe arbitrary resource]]

* How to
This section contains examples of describing FHIR constraints with zen.

Examples use this namespace:
#+BEGIN_SRC edn
  {:ns fhir
   :alias hl7-fhir-r4-core}
#+END_SRC
The namespace aliases FHIR R4 definitions as just ~fhir~ allowing you later to replace this alias to
~hl7-fhir-r4b-core~ or to ~hl7-fhir-r5-core~ and thus migrate your profiles to a newer FHIR core.

Another common thing is ~:zen.fhir/version~ property of schemas.
It defines which ~zen.fhir~ syntax version your schema will use.
Currently, schemas are required to specify the version and the current version is ~:zen.fhir/version "0.5.0"~.
In the future, this property may be deprecated in a backward-compatible way.

** describe a profile on
*** existing FHIR resource type
Create a schema with the ~zen.fhir/profile-schema~ tag. The schema must contain ~:zen.fhir/profileUri~,
which will be referenced by resources with ~meta.profile~ property.
Here's an example of a profile on the ~Patient~ resource type:
#+BEGIN_SRC edn
  {:ns MyProfiles
   :import #{zen.fhir fhir}

   MyPatientProfile
   {:zen/tags #{zen/schema zen.fhir/profile-schema}
    :zen.fhir/version "0.5.0"
    :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
    :confirms #{fhir/Patient}}}
#+END_SRC
Note the ~:confirms #{fhir/Patient}~ part: it means that the data which will be
validated by your schema also should be validated by the base Patient schema.

*** existing FHIR profile 
This is done in the same way as adding a profile on a [[#existing-fhir-resource-type][existing FHIR resource type]] but you need to set ~:confirms~ to a profile instead of a base schema
#+BEGIN_SRC edn
   MyPatientProfileOnAProfile
   {:zen/tags #{zen/schema zen.fhir/profile-schema}
    :zen.fhir/version "0.5.0"
    :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfileOnAProfile"
    :confirms #{MyPatientProfile}}
#+END_SRC

*** existing FHIR data type

** describe a constraint
When you have a symbol with the ~zen.fhir/profile-schema~ tag you can describe constraints.
The important thing to keep in mind is that ~:confirms~ property is not an inheritance.
Your schema doesn't implicitly receive any properties from schemas mentioned in ~:confirms~.
The effect of this is that to describe a constraint you need to explicitly describe some data types and your data structure.
The next example will illustrate this.

*** require (cardinality 1..x)
In zen-lang to require a key to be present you need to set a ~:require~ property.
Here's the updated example of the profile on the Patient resource type with ~:active~ and ~:name~ keys required:
#+BEGIN_SRC edn
   MyPatientProfile
   {:zen/tags #{zen/schema zen.fhir/profile-schema}
    :zen.fhir/version "0.5.0"
    :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
    :confirms #{fhir/Patient}
    :type zen/map
    :require #{:active :name}}
#+END_SRC
Note that we had to describe the ~:type zen/map~ to use the ~:require~ property.
Your schema doesn't implicitly inherit the ~:type zen/map~ from the ~:confirms #{fhir/Patient}~.
And because ~:require~ is a property of the ~zen/map~ type you need to specify the type explicitly in your schema.

*** forbid (cardinality 0..0)
Currently, there's no way to forbid using an element in zen-lang. Here's [[https://github.com/zen-lang/zen/issues/32][the issue]] to track the status of this feature.

*** min and max elements in an array 
~:type zen/vector~ provides ~:minItems~ and ~:maxItems~ properties. Example of limiting a ~Patient.name~ to exactly one element:
#+BEGIN_SRC edn
   MyPatientProfile
   {:zen/tags #{zen/schema zen.fhir/profile-schema}
    :zen.fhir/version "0.5.0"
    :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
    :confirms #{fhir/Patient}
    :type zen/map
    :require #{:name}
    :keys {:name {:type zen/vector
                  :minItems 1
                  :maxItems 1}}}
#+END_SRC
Setting that a ~zen/vector~ has a *minimum 1* element *does not make* a key that stores this value *required* to be present.
We need to explicitly state that the key is also required.

*** value pattern
In FHIR profiles ~pattern[x]~ most of the time is used in [[#slicing-on-an-array][slicings.]]
~:match~ property of ~zen/schema~ allows to describe a pattern matching.

Below is an example defining a pattern to the ~Observation.code~ element,
the pattern describes that in the ~:coding~ array should be
at least one object with ~:system "my-system"~ and ~:code "my-code"~:

#+BEGIN_SRC edn
   MyObservationProfile
   {:zen/tags #{zen/schema zen.fhir/profile-schema}
    :zen.fhir/version "0.5.0"
    :zen.fhir/profileUri "urn:fhir:extension:MyObservationProfile"
    :confirms #{fhir/Observation}
    :type zen/map
    :keys {:code {:match {:coding #{{:system "my-system", :code "my-code"}}}}}}
#+END_SRC

~:match~ pattern matching syntax is a recursive data structure that consists of several parts:
- ~{}~ contains keys and their patterns applied to an object, each key from the ~{}~ should be present in the object and match the pattern.
  The object may contain any extra keys not mentioned in the pattern.
- ~#{}~ contains patterns applied to arrays, for each pattern from the ~#{}~ there should be at least one match in a data array.
  The array may contain any other elements not matched by the pattern.
- any other primitive value means that data should be a constant value

Break down of the example above:
1. The pattern is ~{:coding #{{:system "my-system", :code "my-code"}}}~;
2. Top level of the pattern is ~{:coding ...}~, it expects data to be an object containing key ~:coding~;
3. To a value of the key ~:coding~ the pattern ~#{{:system ...}}~ is applied;
4. The ~#{}~ syntax expects the data to be an array containing at least one match to the pattern ~{:system "my-system", :code "my-code"}~;
5. ~{:system "my-system", :code "my-code"}~ expects data to be an object containing keys ~:system~ and ~:code~ with values "my-system" and "my-code" respectively.

*** fixed value
To define a fixed value use ~:const~ property of ~zen/schema~ allows to describe a constant value.
The same way as patterns, ~value[x]~ most of the times is used in [[#slicing-on-an-array][slicings]] and also to set an extension URL.
Zen FHIR offers first-class extensions instead, in case you want to define an extension refer to the [[#describe-an-extension][extension example]].
Here's an example setting a value of the ~Observation.status~ element to be always ~final~ if it is present:

#+BEGIN_SRC edn
   MyObservationProfile
   {:zen/tags #{zen/schema zen.fhir/profile-schema}
    :zen.fhir/version "0.5.0"
    :zen.fhir/profileUri "urn:fhir:extension:MyObservationProfile"
    :confirms #{fhir/Observation}
    :type zen/map
    :keys {:status {:const {:value "final"}}}}
#+END_SRC

*** slicing on an array
*** binding to a value set
*** invariant

** describe a constraint to a nested element
** describe an extension
*** of a primitive type
*** of a complex type
*** with a nested extension
*** constraint
** add an extension to a profile
** describe a new value set
** constraint some existing value set or code system 
** describe arbitrary resource
