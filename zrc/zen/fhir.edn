{ns zen.fhir

 version
 {:zen/tags #{zen/schema zen/tag version}
  :type zen/map
  :zen.fhir/version "0.5.20"
  :require #{:zen.fhir/version}
  :keys {:zen.fhir/version {:type zen/string
                            :regex "0\\.([5-9]|[1-9][0-9]+)\\.\\d+(?:-\\d+)?"}}}

 Resource
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :keys {:resourceType {:type zen/string}
         :id {:type zen/string}
         :meta {:type zen/map :values {:type zen/any}}}}

 Reference
 {:zen/tags #{zen/schema}
  :zen/desc "reference datatype"
  :type zen/map
  :keys {:id {:type zen/string}
         :resourceType {:type zen/string}
         :display {:type zen/string}
         :localRef {:type zen/string}
         :uri {:type zen/string}}}

 ftr-manifest
 {:zen/tags #{zen/schema}
  :validation-type :open
  :type zen/map
  :keys {:module      {:type zen/string}
         :source-url  {:type zen/string}
         :source-urls {:type zen/vector
                       :every {:type zen/string}}
         :ftr-path    {:type zen/string}
         :tag         {:type zen/string}
         :source-type {:type zen/keyword
                       :enum [{:value :flat-table}
                              {:value :cloud-storage}
                              {:value :serialized-objects-array}
                              {:value :ig}
                              {:value :igs}]}
         :extractor-options {:type zen/map
                             :validation-type :open}}}

 binding
 {:zen/tags #{zen/is-key zen/schema}
  :zen/desc "is value in value-set?"
  :type zen/map
  :validation-type :open
  :keys {:symbol {:type zen/symbol}
         :strength {:type zen/keyword
                    :enum [{:value :required}
                           {:value :extensible}
                           {:value :preferred}
                           {:value :example}]}}}

 value-set-tag
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Value set"
  :confirms #{version}
  :type zen/map
  :keys {:uri {:type zen/string}
         :ftr {:confirms #{ftr-manifest}}
         :fhir/code-systems {:type zen/set
                             :every {:type zen/map
                                     :require #{:fhir/url}
                                     :keys {:fhir/url {:type zen/string}
                                            :zen.fhir/content {:type zen/keyword
                                                               :enum [{:value :bundled}
                                                                      {:value :not-present}]}}}}
         :version {:type zen/string}}}

 value-set
 {:zen/tags #{zen/schema zen/tag zen/is-key}
  :zen/desc "Value set tag. For backwards compatibility this schema also defines value-set value binding schema key"
  :type zen/case
  :case [{:when {:match {:zen/tags #{value-set}}}
          :then {:confirms #{value-set-tag}}}
         {:when {}
          :then {:confirms #{binding}}}]}

 nested-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:fhir/flags {:type zen/set}
         :fhir/extensionUri {:type zen/string}
         :fhir/polymorphic {:type zen/boolean}
         :zen.fhir/reference {:type zen/map
                              :keys {:refers {:type zen/set
                                              :every {:type zen/symbol
                                                      #_#_:tags #{#{zen.fhir/base-schema zen.fhir/profile-schema}}}}}} ;; TODO
         :zen.fhir/nested {:type zen/map
                           :validation-type :open}
         :keys {:type zen/map
                :values {:confirms #{nested-schema}}}
         :every {:confirms #{nested-schema}}
         :slicing {:type zen/map
                   :keys {:slices
                          {:type zen/map
                           :values {:type zen/map
                                    :keys {:schema {:confirms #{nested-schema}}}}}}}}}

 structure-schema
 {:zen/tags #{zen/schema zen/tag}
  :confirms #{nested-schema version}
  :type     zen/map
  :keys     {:zen.fhir/type {:type zen/string}
             :zen.fhir/profileUri {:type zen/string}}}

 base-schema
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "This schema should be used to validate all resources of its type"
  :confirms #{structure-schema}
  :type     zen/map
  :require  #{:zen.fhir/type}}

 profile-schema
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "This schema should be used only when mentioned in meta.profile"
  :confirms #{structure-schema}
  :type     zen/map
  :require  #{:zen.fhir/profileUri}}

 search
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "This symbol defines search on a FHIR resource type"
  :type zen/map
  :keys {:fhir/id {}
         :fhir/url {}
         :fhir/type {}
         :name {}
         :expr {:type zen/map
                :key {:type zen/keyword}
                :values {:type zen/map
                         :keys
                         {:knife {}
                          :jsonpath {:type zen/vector
                                     :every {:type zen/string}}
                          :template {}
                          :data-types {:type zen/set}
                          :sql {:type zen/map
                                :keys {:where {}
                                       :parameter-format {}
                                       :order-by {}}}}}}}}

 ig
 {:zen/tags #{zen/schema zen/tag}
  :type     zen/map
  :keys     {:base-schemas {:type zen/symbol
                            :tags #{base-schemas}}
             :profiles     {:type zen/symbol
                            :tags #{profiles}}
             :extensions   {:type zen/symbol
                            :tags #{extensions}}
             :structures   {:type zen/symbol
                            :tags #{structures}}
             :value-sets   {:type zen/symbol
                            :tags #{value-sets}}
             :searches     {:type zen/symbol
                            :tags #{searches}}}}

 base-schemas
 {:zen/tags #{zen/schema zen/tag}
  :type     zen/map
  :keys     {:schemas {:type   zen/map
                       :key    {:type zen/string}
                       :values {:type   zen/map
                                :key    {:type zen/string}
                                :values {:type zen/qsymbol}}}}}

 profiles
 {:zen/tags #{zen/schema zen/tag}
  :type     zen/map
  :keys     {:schemas {:type   zen/map
                       :key    {:type zen/string}
                       :values {:type   zen/map
                                :key    {:type zen/string}
                                :values {:type zen/qsymbol}}}}}

 extensions
 {:zen/tags #{zen/schema zen/tag}
  :type     zen/map
  :keys     {:schemas {:type   zen/map
                       :key    {:type zen/string}
                       :values {:type zen/qsymbol}}}}

 structures
 {:zen/tags #{zen/schema zen/tag}
  :type     zen/map
  :keys     {:schemas {:type   zen/map
                       :key    {:type zen/string}
                       :values {:type zen/qsymbol}}}}

 value-sets
 {:zen/tags #{zen/schema zen/tag}
  :type     zen/map
  :keys     {:value-sets {:type   zen/map
                          :key    {:type zen/string}
                          :values {:type zen/qsymbol}}}}

 searches
 {:zen/tags #{zen/schema zen/tag}
  :type     zen/map
  :keys     {:searches {:type   zen/map
                        :key    {:type zen/string}
                        :values {:type zen/map
                                 :key    {:type zen/string}
                                 :values {:type zen/qsymbol}}}}}}
